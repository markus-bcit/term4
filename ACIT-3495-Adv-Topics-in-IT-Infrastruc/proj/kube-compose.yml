apiVersion: v1
kind: Service
metadata:
  name: web-app
spec:
  selector:
    app: web-app
  ports:
    - protocol: TCP
      port: 5005
      targetPort: 5005
  dependsOn:
    - mysql
    - auth
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: web-app
spec:
  selector:
    matchLabels:
      app: web-app
  replicas: 1  # Adjust as needed
  template:
    metadata:
      labels:
        app: web-app
    spec:
      containers:
        - name: web-app
          image: <web-app-image>
          ports:
            - containerPort: 5005
---
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  selector:
    app: mysql
  ports:
    - protocol: TCP
      port: 3306
      targetPort: 3306
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  replicas: 1  # Adjust as needed
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
        - name: mysql
          image: <mysql-image>
          env:
            - name: MYSQL_ROOT_PASSWORD
              value: password
            - name: MYSQL_DATABASE
              value: db
          ports:
            - containerPort: 3306
          volumeMounts:
            - name: mysql-data
              mountPath: /var/lib/mysql
      volumes:
        - name: mysql-data
          persistentVolumeClaim:
            claimName: mysql-data
---
apiVersion: v1
kind: Service
metadata:
  name: auth
spec:
  selector:
    app: auth
  ports:
    - protocol: TCP
      port: 8000
      targetPort: 8000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth
spec:
  selector:
    matchLabels:
      app: auth
  replicas: 1  # Adjust as needed
  template:
    metadata:
      labels:
        app: auth
    spec:
      containers:
        - name: auth
          image: <auth-image>
          ports:
            - containerPort: 8000
---
apiVersion: v1
kind: Service
metadata:
  name: node-app
spec:
  selector:
    app: node-app
  ports:
    - protocol: TCP
      port: 3000
      targetPort: 3000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: node-app
spec:
  selector:
    matchLabels:
      app: node-app
  replicas: 1  # Adjust as needed
  template:
    metadata:
      labels:
        app: node-app
    spec:
      containers:
        - name: node-app
          image: <node-app-image>
          ports:
            - containerPort: 3000
---
apiVersion: v1
kind: Service
metadata:
  name: mongodb
spec:
  selector:
    app: mongodb
  ports:
    - protocol: TCP
      port: 27017
      targetPort: 27017
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongodb
spec:
  selector:
    matchLabels:
      app: mongodb
  replicas: 1  # Adjust as needed
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
        - name: mongodb
          image: mongo:latest
          ports:
            - containerPort: 27017
          volumeMounts:
            - name: mongodb-data
              mountPath: /data/db
            - name: init-script
              mountPath: /docker-entrypoint-initdb.d
      volumes:
        - name: mongodb-data
          persistentVolumeClaim:
            claimName: mongodb-data
        - name: init-script
          hostPath:
            path: /path/to/mongo-init.js
---
apiVersion: v1
kind: Service
metadata:
  name: analytics
spec:
  selector:
    app: analytics
  ports:
    - protocol: TCP
      port: 8081
      targetPort: 8081
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: analytics
spec:
  selector:
    matchLabels:
      app: analytics
  replicas: 1  # Adjust as needed
  template:
    metadata:
      labels:
        app: analytics
    spec:
      containers:
        - name: analytics
          image: <analytics-image>
          ports:
            - containerPort: 8081
